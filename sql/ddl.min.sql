PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS _Schema ( id INTEGER PRIMARY KEY NOT NULL check (id = 0), version INTEGER NOT NULL ); INSERT OR IGNORE INTO _Schema VALUES(0, 2); CREATE VIEW IF NOT EXISTS _vSchema (valid) AS SELECT version = 2 FROM _Schema; CREATE TABLE IF NOT EXISTS Stock ( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, incomeType TEXT, notes TEXT, currency TEXT, priceFactor INTEGER, updated TEXT NOT NULL ); CREATE TABLE IF NOT EXISTS Price ( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, price NUMBER, source TEXT, updated TEXT NOT NULL ); CREATE TABLE IF NOT EXISTS Metric ( ticker TEXT NOT NULL PRIMARY KEY, dividend NUMBER, nav NUMBER, eps NUMBER, updated TEXT NOT NULL ); CREATE TABLE IF NOT EXISTS Dividend ( date TEXT NOT NULL, ticker TEXT NOT NULL, dividend NUMBER NOT NULL, currency TEXT, exdiv TEXT, declared TEXT, source TEXT, updated TEXT NOT NULL, PRIMARY KEY (ticker, date) ); CREATE TABLE IF NOT EXISTS Position ( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, qty INTEGER NOT NULL, updated TEXT NOT NULL, PRIMARY KEY (ticker, account, who) ); CREATE TABLE IF NOT EXISTS Trade ( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, date TEXT NOT NULL, seq INTEGER NOT NULL, qty INTEGER, cost INTEGER, gain INTEGER, proceeds INTEGER, notes TEXT, updated TEXT NOT NULL, PRIMARY KEY (ticker, account, who, date, seq) ); CREATE VIEW IF NOT EXISTS vStock AS SELECT a.ticker, a.name, a.incomeType, a.notes, 100.0 * b.price / a.priceFactor AS price, 100.0 * c.dividend AS dividend, c.dividend * a.priceFactor / b.price AS yield FROM Stock a JOIN Price b USING (ticker) JOIN Metric c USING (ticker); CREATE VIEW IF NOT EXISTS vPosition AS WITH cteCost AS ( SELECT ticker, account, who, SUM(cost) AS cost FROM Trade GROUP BY ticker, account, who ) SELECT a.ticker, a.account, a.who, a.qty AS qty, b.price AS price, b.dividend AS dividend, CAST(a.qty * b.price AS INTEGER) AS value, CAST(a.qty * b.dividend AS INTEGER) AS income, b.yield, c.cost AS cost, CAST(a.qty * b.price - c.cost AS INTEGER) AS gain FROM Position a JOIN vStock b USING (ticker) JOIN cteCost c USING (ticker, account, who); COMMIT; VACUUM; BEGIN TRANSACTION; CREATE TEMP TABLE temp_Stock( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, incomeType TEXT, notes TEXT, currency TEXT, priceFactor INTEGER ); CREATE TEMP VIEW vAddStock (ticker, name, incomeType, notes, currency, priceFactor, updated) AS SELECT a.ticker, a.name, a.incomeType, a.notes, a.currency, a.priceFactor, datetime('now') FROM temp_Stock a LEFT JOIN Stock b USING (ticker) WHERE b.ticker IS NULL OR (a.name, a.incomeType, a.notes, a.currency, a.priceFactor) IS NOT (b.name, b.incomeType, b.notes, b.currency, b.priceFactor); CREATE TEMP VIEW vDelStock (ticker, name, incomeType, notes, currency, priceFactor, updated) AS SELECT ticker, NULL, NULL, NULL, NULL, NULL, datetime('now') FROM Stock WHERE ticker NOT IN ( SELECT ticker FROM temp_Stock ); CREATE TEMP VIEW vAuditStock (ticker, name, incomeType, notes, currency, priceFactor, updated) AS SELECT * FROM vAddStock UNION ALL SELECT * FROM vDelStock; CREATE TEMP VIEW spSaveStock AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveStock INSTEAD OF INSERT ON spSaveStock BEGIN INSERT OR REPLACE INTO Stock SELECT * FROM vAddStock; DELETE FROM Stock WHERE ticker IN (SELECT ticker FROM vDelStock); DELETE FROM temp_Stock; END; CREATE TEMP TABLE temp_Price( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, price NUMBER, source TEXT ); CREATE TEMP VIEW vAddPrice (ticker, name, price, source, updated) AS SELECT a.ticker, a.name, a.price, a.source, datetime('now') FROM temp_Price a LEFT JOIN Price b USING (ticker) WHERE b.ticker IS NULL OR (a.name, a.price, a.source) IS NOT (b.name, b.price, b.source); CREATE TEMP VIEW vDelPrice (ticker, name, price, source, updated) AS SELECT ticker, NULL, NULL, NULL, datetime('now') FROM Price WHERE ticker NOT IN ( SELECT ticker FROM temp_Price ); CREATE TEMP VIEW vAuditPrice (ticker, name, price, source, updated) AS SELECT * from vAddPrice UNION ALL SELECT * FROM vDelPrice; CREATE TEMP VIEW spSavePrice AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSavePrice INSTEAD OF INSERT ON spSavePrice BEGIN INSERT OR REPLACE INTO Price SELECT * FROM vAddPrice; DELETE FROM Price WHERE ticker IN (SELECT ticker FROM vDelPrice); DELETE FROM temp_Price; END; CREATE TEMP TABLE temp_Metric( ticker TEXT NOT NULL PRIMARY KEY, dividend NUMBER, nav NUMBER, eps NUMBER ); CREATE TEMP VIEW vAddMetric (ticker, dividend, nav, eps, updated) AS SELECT a.ticker, a.dividend, a.nav, a.eps, datetime('now') FROM temp_Metric a LEFT JOIN Metric b USING (ticker) WHERE b.ticker IS NULL OR (a.dividend, a.nav, a.eps) IS NOT (b.dividend, b.nav, b.eps); CREATE TEMP VIEW vDelMetric (ticker, dividend, nav, eps, updated) AS SELECT ticker, NULL, NULL, NULL, datetime('now') FROM Metric WHERE ticker NOT IN ( SELECT ticker FROM temp_Metric ); CREATE TEMP VIEW vAuditMetric (ticker, dividend, nav, eps, updated) AS SELECT * from vAddMetric UNION ALL SELECT * FROM vDelMetric; CREATE TEMP VIEW spSaveMetric AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveMetric INSTEAD OF INSERT ON spSaveMetric BEGIN INSERT OR REPLACE INTO Metric SELECT * FROM vAddMetric; DELETE FROM Metric WHERE ticker IN (SELECT ticker FROM vDelMetric); DELETE FROM temp_Metric; END; CREATE TEMP TABLE temp_Dividend( date TEXT NOT NULL, ticker TEXT NOT NULL, dividend NUMBER NOT NULL, currency TEXT, exdiv TEXT, declared TEXT, source TEXT, PRIMARY KEY (ticker, date) ); CREATE TEMP VIEW vAddDividend (date, ticker, dividend, currency, exdiv, declared, source, updated) AS SELECT a.date, a.ticker, a.dividend, a.currency, a.exdiv, a.declared, a.source, datetime('now') FROM temp_Dividend a LEFT JOIN Dividend b USING (ticker, date) WHERE (b.ticker, b.date) IS (NULL, NULL) OR (a.dividend, a.currency, a.exdiv, a.declared, a.source) IS NOT (b.dividend, b.currency, b.exdiv, b.declared, b.source); CREATE TEMP VIEW vDelDividend (date, ticker, dividend, currency, exdiv, declared, source, updated) AS SELECT date, ticker, NULL, NULL, NULL, NULL, NULL, datetime('now') FROM Dividend WHERE (ticker, date) NOT IN ( SELECT ticker, date FROM temp_Dividend ); CREATE TEMP VIEW vAuditDividend (date, ticker, dividend, currency, exdiv, declared, source, updated) AS SELECT * FROM vAddDividend UNION ALL SELECT * FROM vDelDividend; CREATE TEMP VIEW spSaveDividend AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveDividend INSTEAD OF INSERT ON spSaveDividend BEGIN INSERT OR REPLACE INTO Dividend SELECT * FROM vAddDividend; DELETE FROM Dividend WHERE (ticker, date) IN (SELECT ticker, date FROM vDelDividend); DELETE FROM temp_Dividend; END; CREATE TEMP TABLE temp_Position( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, qty INTEGER NOT NULL, PRIMARY KEY (ticker, account, who) ); CREATE TEMP VIEW vAddPosition (ticker, account, who, qty, updated) AS SELECT a.ticker, a.account, a.who, a.qty, datetime('now') FROM temp_Position a LEFT JOIN Position b USING (ticker, account, who) WHERE (b.ticker, b.account, b.who) IS (NULL, NULL, NULL) OR a.qty IS NOT b.qty; CREATE TEMP VIEW vDelPosition (ticker, account, who, qty, updated) AS SELECT ticker, account, who, NULL, datetime('now') FROM Position WHERE (ticker, account, who) NOT IN ( SELECT ticker, account, who FROM temp_Position ); CREATE TEMP VIEW vAuditPosition (ticker, account, who, qty, updated) AS SELECT * FROM vAddPosition UNION ALL SELECT * FROM vDelPosition; CREATE TEMP VIEW spSavePosition AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSavePosition INSTEAD OF INSERT ON spSavePosition BEGIN INSERT OR REPLACE INTO Position SELECT * FROM vAddPosition; DELETE FROM Position WHERE (ticker, account, who) IN (SELECT ticker, account, who FROM vDelPosition); DELETE FROM temp_Position; END; CREATE TEMP TABLE temp_Trade( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, date TEXT NOT NULL, seq INTEGER NOT NULL DEFAULT 0, qty INTEGER, cost INTEGER, gain INTEGER, proceeds INTEGER, notes TEXT, PRIMARY KEY (ticker, account, who, date, seq) ); CREATE TEMP TRIGGER temp_Trade_ti AFTER INSERT ON temp_Trade BEGIN UPDATE temp_Trade SET seq = ( SELECT COUNT(*) FROM temp_Trade WHERE (ticker, account, who, date) = (NEW.ticker, NEW.account, NEW.who, NEW.date) ) WHERE (ticker, account, who, date, seq) = (NEW.ticker, NEW.account, NEW.who, NEW.date, NEW.seq); END; CREATE TEMP VIEW vAddTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes, updated) AS SELECT a.ticker, a.account, a.who, a.date, a.seq, a.qty, a.cost, a.gain, a.proceeds, a.notes, datetime('now') FROM temp_Trade a LEFT JOIN Trade b USING (ticker, account, who, date, seq) WHERE (b.ticker, b.account, b.who, b.date, b.seq) IS (NULL, NULL, NULL, NULL, NULL) OR (a.qty, a.cost, a.gain, a.proceeds, a.notes) IS NOT (b.qty, b.cost, b.gain, b.proceeds, b.notes); CREATE TEMP VIEW vDelTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes, updated) AS SELECT ticker, account, who, date, seq, NULL, NULL, NULL, NULL, NULL, datetime('now') FROM Trade WHERE (ticker, account, who, date, seq) NOT IN ( SELECT ticker, account, who, date, seq FROM temp_Trade ); CREATE TEMP VIEW vAuditTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes, updated) AS SELECT * FROM vAddTrade UNION ALL SELECT * FROM vDelTrade; CREATE TEMP VIEW spSaveTrade AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveTrade INSTEAD OF INSERT ON spSaveTrade BEGIN INSERT OR REPLACE INTO Trade SELECT * FROM vAddTrade; DELETE FROM Trade WHERE (ticker, account, who, date, seq) IN (SELECT ticker, account, who, date, seq FROM vDelTrade); DELETE FROM temp_Trade; END; COMMIT; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS audit._Schema ( id INTEGER PRIMARY KEY CHECK (id = 0), version INTEGER NOT NULL); INSERT OR IGNORE INTO audit._Schema VALUES (0, 1); CREATE VIEW IF NOT EXISTS audit._vSchema (valid) AS SELECT version = 1 FROM _Schema; CREATE TABLE IF NOT EXISTS audit.Stock( ticker TEXT NOT NULL, name TEXT, incomeType TEXT, notes TEXT, currency TEXT, priceFactor INTEGER, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Stock_ix_1 ON Stock (ticker); CREATE TABLE IF NOT EXISTS audit.Price( ticker TEXT NOT NULL, name TEXT, price NUMBER, source TEXT, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Price_ix_1 ON Price (ticker); CREATE TABLE IF NOT EXISTS audit.Metric( ticker TEXT NOT NULL, dividend NUMBER, nav NUMBER, eps NUMBER, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Metric_ix_1 ON Metric (ticker); CREATE TABLE IF NOT EXISTS audit.Dividend( date TEXT NOT NULL, ticker TEXT NOT NULL, dividend NUMBER, currency TEXT, exdiv TEXT, declared TEXT, source TEXT, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Dividend_ix_1 ON Dividend (ticker, date); CREATE TABLE IF NOT EXISTS audit.Position( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, qty INTEGER, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Position_ix_1 ON Position (ticker, account, who); CREATE TABLE IF NOT EXISTS audit.Trade( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, date TEXT NOT NULL, seq INTEGER NOT NULL, qty INTEGER, cost INTEGER, gain INTEGER, proceeds INTEGER, notes TEXT, updated TEXT NOT NULL ); CREATE INDEX IF NOT EXISTS audit.Trade_ix_1 ON Trade (ticker, account, who, date, seq); COMMIT; VACUUM audit;