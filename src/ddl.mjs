export default "PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS _Schema (version INTEGER NOT NULL); INSERT INTO _Schema SELECT 1 WHERE NOT EXISTS (SELECT version FROM _Schema); CREATE VIEW IF NOT EXISTS _vSchema (valid) AS SELECT version = 1 FROM _Schema; CREATE TABLE IF NOT EXISTS Stock ( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, incomeType TEXT, notes TEXT, currency TEXT, factor INTEGER, updated TEXT NOT NULL ); CREATE TEMP TABLE temp_Stock( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, incomeType TEXT, notes TEXT, currency TEXT, factor INTEGER ); CREATE TEMP VIEW vAddStock AS SELECT ticker, name, incomeType, notes, currency, factor FROM temp_Stock a WHERE ticker NOT IN ( SELECT ticker FROM Stock b WHERE b.ticker = a.ticker ); CREATE TEMP VIEW vChgStock AS SELECT a.ticker, a.name, a.incomeType, a.notes, a.currency, a.factor FROM temp_Stock a JOIN Stock b USING (ticker) WHERE (a.name, a.incomeType, a.notes, a.currency, a.factor) IS NOT (b.name, b.incomeType, b.notes, b.currency, b.factor); CREATE TEMP VIEW vDeltaStock (ticker, name, incomeType, notes, currency, factor) AS SELECT a.ticker, IIF(a.name IS b.name, NULL, a.name), IIF(a.incomeType IS b.incomeType, NULL, a.incomeType), IIF(a.notes IS b.notes, NULL, a.notes), IIF(a.currency IS b.currency, NULL, a.currency), IIF(a.factor IS b.factor, NULL, a.factor) FROM vChgStock a JOIN Stock b USING (ticker); CREATE TEMP VIEW vDelStock (ticker, name, incomeType, notes, currency, factor) AS SELECT ticker, NULL, NULL, NULL, NULL, NULL FROM Stock WHERE ticker NOT IN ( SELECT ticker FROM temp_Stock ); CREATE TEMP VIEW vAuditStock (ticker, name, incomeType, notes, currency, factor, updated) AS SELECT *, datetime('now') FROM vDelStock UNION ALL SELECT *, datetime('now') FROM vDeltaStock UNION ALL SELECT *, datetime('now') FROM vAddStock; CREATE TEMP VIEW spSaveStock AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveStock INSTEAD OF INSERT ON spSaveStock BEGIN DELETE FROM Stock WHERE ticker IN (SELECT ticker FROM vDelStock); UPDATE Stock SET (name, incomeType, notes, currency, factor) = (SELECT name, incomeType, notes, currency, factor FROM vChgStock WHERE ticker = Stock.ticker), updated = datetime('now') WHERE ticker IN (SELECT ticker FROM vChgStock); INSERT INTO Stock SELECT *, datetime('now') FROM vAddStock; DELETE FROM temp_Stock; END; CREATE TABLE IF NOT EXISTS Price ( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, price NUMBER, source TEXT, updated TEXT NOT NULL ); CREATE TEMP TABLE temp_Price( ticker TEXT NOT NULL PRIMARY KEY, name TEXT, price NUMBER, source TEXT ); CREATE TEMP VIEW vAddPrice AS SELECT ticker, name, price, source FROM temp_Price a WHERE ticker NOT IN ( SELECT ticker FROM Price b WHERE b.ticker = a.ticker ); CREATE TEMP VIEW vChgPrice AS SELECT a.ticker, a.name, a.price, a.source FROM temp_Price a JOIN Price b USING (ticker) WHERE (a.name, a.price, a.source) IS NOT (b.name, b.price, b.source); CREATE TEMP VIEW vDeltaPrice (ticker, name, price, source) AS SELECT a.ticker, IIF(a.name IS b.name, NULL, a.name), IIF(a.price IS b.price, NULL, a.price), IIF(a.source IS b.source, NULL, a.source) FROM vChgPrice a JOIN Price b USING (ticker); CREATE TEMP VIEW vDelPrice (ticker, name, price, source) AS SELECT ticker, NULL, NULL, NULL FROM Price WHERE ticker NOT IN ( SELECT ticker FROM temp_Price ); CREATE TEMP VIEW vAuditPrice (ticker, name, price, source, updated) AS SELECT *, datetime('now') FROM vDelPrice UNION ALL SELECT *, datetime('now') FROM vDeltaPrice UNION ALL SELECT *, datetime('now') FROM vAddPrice; CREATE TEMP VIEW spSavePrice AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSavePrice INSTEAD OF INSERT ON spSavePrice BEGIN DELETE FROM Price WHERE ticker IN (SELECT ticker FROM vDelPrice); UPDATE Price SET (name, price, source) = (SELECT name, price, source FROM vChgPrice WHERE ticker = Price.ticker), updated = datetime('now') WHERE ticker IN (SELECT ticker FROM vChgPrice); INSERT INTO Price SELECT *, datetime('now') FROM vAddPrice; DELETE FROM temp_Price; END; CREATE TABLE IF NOT EXISTS Metric ( ticker TEXT NOT NULL PRIMARY KEY, dividend NUMBER, nav NUMBER, eps NUMBER, updated TEXT NOT NULL ); CREATE TEMP TABLE temp_Metric( ticker TEXT NOT NULL PRIMARY KEY, dividend NUMBER, nav NUMBER, eps NUMBER ); CREATE TEMP VIEW vAddMetric AS SELECT ticker, dividend, nav, eps FROM temp_Metric a WHERE ticker NOT IN ( SELECT ticker FROM Metric b WHERE b.ticker = a.ticker ); CREATE TEMP VIEW vChgMetric AS SELECT a.ticker, a.dividend, a.nav, a.eps FROM temp_Metric a JOIN Metric b USING (ticker) WHERE (a.dividend, a.nav, a.eps) IS NOT (b.dividend, b.nav, b.eps); CREATE TEMP VIEW vDeltaMetric (ticker, dividend, nav, eps) AS SELECT a.ticker, IIF(a.dividend IS b.dividend, NULL, a.dividend), IIF(a.nav IS b.nav, NULL, a.nav), IIF(a.eps IS b.eps, NULL, a.eps) FROM vChgMetric a JOIN Metric b USING (ticker); CREATE TEMP VIEW vDelMetric (ticker, dividend, nav, eps) AS SELECT ticker, NULL, NULL, NULL FROM Metric WHERE ticker NOT IN ( SELECT ticker FROM temp_Metric ); CREATE TEMP VIEW vAuditMetric (ticker, dividend, nav, eps, updated) AS SELECT *, datetime('now') FROM vDelMetric UNION ALL SELECT *, datetime('now') FROM vDeltaMetric UNION ALL SELECT *, datetime('now') FROM vAddMetric; CREATE TEMP VIEW spSaveMetric AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveMetric INSTEAD OF INSERT ON spSaveMetric BEGIN DELETE FROM Metric WHERE ticker IN (SELECT ticker FROM vDelMetric); UPDATE Metric SET (dividend, nav, eps) = (SELECT dividend, nav, eps FROM vChgMetric WHERE ticker = Metric.ticker), updated = datetime('now') WHERE ticker IN (SELECT ticker FROM vChgMetric); INSERT INTO Metric SELECT *, datetime('now') FROM vAddMetric; DELETE FROM temp_Metric; END; CREATE TABLE IF NOT EXISTS Dividend ( ticker TEXT NOT NULL, date TEXT NOT NULL, dividend NUMBER NOT NULL, currency TEXT, exdiv TEXT, declared TEXT, updated TEXT NOT NULL, PRIMARY KEY (ticker, date) ); CREATE TEMP TABLE temp_Dividend( ticker TEXT NOT NULL, date TEXT NOT NULL, dividend NUMBER NOT NULL, currency TEXT, exdiv TEXT, declared TEXT, PRIMARY KEY (ticker, date) ); CREATE TEMP VIEW vAddDividend AS SELECT ticker, date, dividend, currency, exdiv, declared FROM temp_Dividend a WHERE (ticker, date) NOT IN ( SELECT ticker, date FROM Dividend b WHERE b.ticker = a.ticker AND b.date = a.date ); CREATE TEMP VIEW vChgDividend AS SELECT a.ticker, a.date, a.dividend, a.currency, a.exdiv, a.declared FROM temp_Dividend a JOIN Dividend b USING (ticker, date) WHERE (a.dividend, a.currency, a.exdiv, a.declared) IS NOT (b.dividend, b.currency, b.exdiv, b.declared); CREATE TEMP VIEW vDeltaDividend (ticker, date, dividend, currency, exdiv, declared) AS SELECT a.ticker, a.date, IIF(a.dividend IS b.dividend, NULL, a.dividend), IIF(a.currency IS b.currency, NULL, a.currency), IIF(a.exdiv IS b.exdiv, NULL, a.exdiv), IIF(a.declared IS b.declared, NULL, a.declared) FROM vChgDividend a JOIN Dividend b USING (ticker, date); CREATE TEMP VIEW vDelDividend (ticker, date, dividend, currency, exdiv, declared) AS SELECT ticker, date, NULL, NULL, NULL, NULL FROM Dividend WHERE (ticker, date) NOT IN ( SELECT ticker, date FROM temp_Dividend ); CREATE TEMP VIEW vAuditDividend (ticker, date, dividend, currency, exdiv, declared, updated) AS SELECT *, datetime('now') FROM vDelDividend UNION ALL SELECT *, datetime('now') FROM vDeltaDividend UNION ALL SELECT *, datetime('now') FROM vAddDividend; CREATE TEMP VIEW spSaveDividend AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveDividend INSTEAD OF INSERT ON spSaveDividend BEGIN DELETE FROM Dividend WHERE (ticker, date) IN (SELECT ticker, date FROM vDelDividend); UPDATE Dividend SET (dividend, currency, exdiv, declared) = (SELECT dividend, currency, exdiv, declared FROM vChgDividend WHERE (ticker, date) IS (Dividend.ticker, Dividend.date)), updated = datetime('now') WHERE (ticker, date) IN (SELECT ticker, date FROM vChgDividend); INSERT INTO Dividend SELECT *, datetime('now') FROM vAddDividend; DELETE FROM temp_Dividend; END; CREATE TABLE IF NOT EXISTS Position ( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, qty INTEGER NOT NULL, updated TEXT NOT NULL, PRIMARY KEY (ticker, account, who) ); CREATE TEMP TABLE temp_Position( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, qty INTEGER NOT NULL, PRIMARY KEY (ticker, account, who) ); CREATE TEMP VIEW vAddPosition AS SELECT ticker, account, who, qty FROM temp_Position a WHERE (ticker, account, who) NOT IN ( SELECT ticker, account, who FROM Position b WHERE (b.ticker, b.account, b.who) = (a.ticker, a.account, a.who) ); CREATE TEMP VIEW vChgPosition AS SELECT a.ticker, a.account, a.who, a.qty FROM temp_Position a JOIN Position b USING (ticker, account, who) WHERE a.qty IS NOT b.qty; CREATE TEMP VIEW vDeltaPosition (ticker, account, who, qty) AS SELECT a.ticker, a.account, a.who, IIF(a.qty IS b.qty, NULL, a.qty) FROM vChgPosition a JOIN Position b USING (ticker, account, who); CREATE TEMP VIEW vDelPosition (ticker, account, who, qty) AS SELECT ticker, account, who, NULL FROM Position WHERE (ticker, account, who) NOT IN ( SELECT ticker, account, who FROM temp_Position ); CREATE TEMP VIEW vAuditPosition (ticker, account, who, qty, updated) AS SELECT *, datetime('now') FROM vDelPosition UNION ALL SELECT *, datetime('now') FROM vDeltaPosition UNION ALL SELECT *, datetime('now') FROM vAddPosition; CREATE TEMP VIEW spSavePosition AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSavePosition INSTEAD OF INSERT ON spSavePosition BEGIN DELETE FROM Position WHERE (ticker, account, who) IN (SELECT ticker, account, who FROM vDelPosition); UPDATE Position SET qty = (SELECT qty FROM vChgPosition WHERE (ticker, account, who) = (Position.ticker, Position.account, Position.who) ), updated = datetime('now') WHERE (ticker, account, who) IN (SELECT ticker, account, who FROM vChgPosition); INSERT INTO Position SELECT *, datetime('now') FROM vAddPosition; DELETE FROM temp_Position; END; CREATE TABLE IF NOT EXISTS Trade ( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, date TEXT NOT NULL, seq INTEGER NOT NULL, qty INTEGER, cost INTEGER, gain INTEGER, proceeds INTEGER, notes TEXT, updated TEXT NOT NULL, PRIMARY KEY (ticker, account, who, date, seq) ); CREATE TEMP TABLE temp_Trade( ticker TEXT NOT NULL, account TEXT NOT NULL, who TEXT NOT NULL, date TEXT NOT NULL, seq INTEGER NOT NULL, qty INTEGER, cost INTEGER, gain INTEGER, proceeds INTEGER, notes TEXT, PRIMARY KEY (ticker, account, who, date, seq) ); CREATE TEMP TRIGGER temp_Trade_ti AFTER INSERT ON temp_Trade BEGIN UPDATE temp_Trade SET seq = ( SELECT COUNT(*) FROM temp_Trade WHERE (ticker, account, who, date) = (NEW.ticker, NEW.account, NEW.who, NEW.date) ) WHERE (ticker, account, who, date, seq) = (NEW.ticker, NEW.account, NEW.who, NEW.date, NEW.seq); END; CREATE TEMP VIEW vAddTrade AS SELECT ticker, account, who, date, seq, qty, cost, gain, proceeds, notes FROM temp_Trade a WHERE (ticker, account, who, date, seq) NOT IN ( SELECT ticker, account, who, date, seq FROM Trade b WHERE (b.ticker, b.account, b.who, b.date, b.seq) = (a.ticker, a.account, a.who, a.date, a.seq) ); CREATE TEMP VIEW vChgTrade AS SELECT a.ticker, a.account, a.who, a.date, a.seq, a.qty, a.cost, a.gain, a.proceeds, a.notes FROM temp_Trade a JOIN Trade b USING (ticker, account, who, date, seq) WHERE (a.qty, a.cost, a.gain, a.proceeds, a.notes) IS NOT (b.qty, b.cost, b.gain, b.proceeds, b.notes); CREATE TEMP VIEW vDeltaTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes) AS SELECT a.ticker, a.account, a.who, a.date, a.seq, IIF(a.qty IS b.qty, NULL, a.qty), IIF(a.cost IS b.cost, NULL, a.cost), IIF(a.gain IS b.gain, NULL, a.gain), IIF(a.proceeds IS b.proceeds, NULL, a.proceeds), IIF(a.notes IS b.notes, NULL, a.notes) FROM vChgTrade a JOIN Trade b USING (ticker, account, who, date, seq); CREATE TEMP VIEW vDelTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes) AS SELECT ticker, account, who, date, seq, NULL, NULL, NULL, NULL, NULL FROM Trade WHERE (ticker, account, who, date, seq) NOT IN ( SELECT ticker, account, who, date, seq FROM temp_Trade ); CREATE TEMP VIEW vAuditTrade (ticker, account, who, date, seq, qty, cost, gain, proceeds, notes, updated) AS SELECT *, datetime('now') FROM vDelTrade UNION ALL SELECT *, datetime('now') FROM vDeltaTrade UNION ALL SELECT *, datetime('now') FROM vAddTrade; CREATE TEMP VIEW spSaveTrade AS SELECT 0 WHERE 0; CREATE TEMP TRIGGER sptSaveTrade INSTEAD OF INSERT ON spSaveTrade BEGIN DELETE FROM Trade WHERE (ticker, account, who, date, seq) IN (SELECT ticker, account, who, date, seq FROM vDelTrade); UPDATE Trade SET (qty, cost, gain, proceeds, notes) = (SELECT qty, cost, gain, proceeds, notes FROM vChgTrade WHERE (ticker, account, who, date, seq) = (Trade.ticker, Trade.account, Trade.who, Trade.date, Trade.seq) ), updated = datetime('now') WHERE (ticker, account, who, date, seq) IN (SELECT ticker, account, who, date, seq FROM vChgTrade); INSERT INTO Trade SELECT *, datetime('now') FROM vAddTrade; DELETE FROM temp_Trade; END; COMMIT; PRAGMA wal_checkpoint(truncate); VACUUM;"
